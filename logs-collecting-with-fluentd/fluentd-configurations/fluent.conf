# ------------------------------------------------------------------------------
# Fluentd pipeline (Docker demo)
# Goal:
#   - Ingest JSON log lines from multiple files
#   - Keep:
#       * ERROR logs from namespaces matching ^fnlgr-
#       * INFO  logs from namespace exactly statsvc-env5
#   - Merge all selected events into ONE file.
#
# Notes:
#   - This file is used in a Docker demo to simulate EKS logs.
#   - Namespace is injected by the sample logger as:
#       {"kubernetes":{"namespace_name":"<ns>"}}
# ------------------------------------------------------------------------------

# -----------------------------------
# Source: tail all *.log as JSON-Lines
# -----------------------------------
<source>
  @type tail
  path /fluentd/log/files/*.log
  pos_file /fluentd/pos/app.pos
  tag app.log
  read_from_head true
  <parse>
    @type json
  </parse>
</source>

# -----------------------------------------------------------
# Fork the stream into two independent branches for filtering
# -----------------------------------------------------------
<match app.log>
  @type copy
  <store>
    @type relabel
    @label @FNLGR
  </store>
  <store>
    @type relabel
    @label @STATS
  </store>
</match>

# ----------------------------------------------
# Branch 1: ERRORs from namespaces /^fnlgr-/
# ----------------------------------------------
<label @FNLGR>
  # Keep only namespaces matching the regex
  <filter **>
    @type grep
    <regexp>
      key $.kubernetes.namespace_name
      pattern ^fnlgr-
    </regexp>
  </filter>

  # Then keep only ERROR level
  <filter **>
    @type grep
    <regexp>
      key level
      pattern ^ERROR$
    </regexp>
  </filter>

  # Send to the shared merge sink
  <match **>
    @type relabel
    @label @MERGED
  </match>
</label>

# ---------------------------------------------------------------
# Branch 2: INFOs from namespace exactly statsvc-env5
# ---------------------------------------------------------------
<label @STATS>
  # Keep only the exact namespace (string anchor ^...$)
  <filter **>
    @type grep
    <regexp>
      key $.kubernetes.namespace_name
      pattern ^statsvc-env5$
    </regexp>
  </filter>

  # Then keep only INFO level
  <filter **>
    @type grep
    <regexp>
      key level
      pattern ^INFO$
    </regexp>
  </filter>

  # Send to the shared merge sink
  <match **>
    @type relabel
    @label @MERGED
  </match>
</label>

# ------------------------------------------
# Merge sink: write everything into ONE file
# ------------------------------------------
<label @MERGED>
  <match **>
    @type file
    path /output/merged.log
  </match>
</label>
